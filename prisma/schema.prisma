datasource db {
  provider = "sqlite" // Specify SQLite as the provider
  url      = env("DATABASE_URL") // Use the DATABASE_URL from your .env file
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           String  @id @default(uuid())
  name         String
  description  String
  careguide    String
  category     String
  priceInCents Int
  imagePath    String
  isAvailableForPurchase Boolean @default(true)
  stock        Int     @default(0) // Default stock set to 0
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  images       Image[]
  orderItems   OrderItem[]
}

model Image {
  id        String   @id @default(uuid())
  imagePath String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id               String    @id @default(uuid())
  pricePaidInCents Int
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDelivery       Boolean?  @default(false)
  recipientName    String?
  deliveryAddress  String?
  deliveryInstructions String?
  postalCode       String?
  deliveryDate     DateTime? // Store selected delivery date
  deliveryTime     String?   // Store selected time window
  status           String    @default("CART") // Status indicating an active cart
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orderItems       OrderItem[]
}

model OrderItem {
  id                 String   @id @default(uuid())
  orderId            String
  productId          String
  quantity           Int
  subtotalInCents    Int
  cardMessage        String?  // Store personalized card message
  deliveryInstructions String?
  order              Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model DeliveryFeeConfig {
  id                String   @id @default(uuid())
  basePostalCode    String
  type              String   // "distance-based" or "flat"
  distanceFeePerKm  Int?     // Fee per kilometer, optional
  customRules       CustomDeliveryRule[]
}

model CustomDeliveryRule {
  id                  String            @id @default(uuid())
  postalCodePrefix    String
  feeInCents          Int
  deliveryFeeConfig   DeliveryFeeConfig @relation(fields: [deliveryFeeConfigId], references: [id])
  deliveryFeeConfigId String
}
