// prisma/schema.prisma

datasource db {
  provider = "sqlite" // Specify SQLite as the provider
  url      = env("DATABASE_URL") // Use the DATABASE_URL from your .env file
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id                     String            @id @default(uuid())
  name                   String
  description            String
  careguide              String
  category               String
  imagePath              String
  priceInCents           Int?
  isAvailableForPurchase Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  images                 Image[]
  orderItems             OrderItem[]
  featuredProducts       FeaturedProduct[] // Updated relation name to match new model name
  sizes                  ProductVariant[] // Relation to the ProductVariant model
}

model ProductVariant {
  id           String   @id @default(uuid())
  size         String // e.g., "Small", "Medium", "Large"
  priceInCents Int // Price specific to this size
  productId    String
  orderItems   OrderItem[] // Relation to OrderItem
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model FeaturedProduct {
  id            String    @id @default(uuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  featuredUntil DateTime? // Optional field to track when a product should stop being featured

  @@index([productId]) // Index on productId for faster querying
}

model Image {
  id        String   @id @default(uuid())
  imagePath String
  productId String
  usedFor   String?
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String    @id @default(uuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  phone            String?
  image            String?
  magicLinkToken   String? // Token for passwordless authentication
  magicLinkExpires DateTime? // Expiration for the magic link
  sessions         Session[] // Relation to Session
  orders           Order[] // Your existing Order model relation
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                 String           @id @default(uuid())
  invoiceNumber      String?          @unique

  deliveryFeeInCents Int?
  taxInCents         Int?

  pricePaidInCents   Int
  category           String?
  userId             String?
  user               User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestEmail         String?
  guestName          String?
  guestPhone         String?
  recipientName      String?
  isDelivery         Boolean?         @default(false)
  paymentMethod      String?
  transactionId      String?
  transactionStatus  String?
  idempotencyKey     String?
  notes              String? // Store additional notes
  deliveryDate       DateTime? // Store selected delivery dat
  deliveryTime       String? // Store selected time window
  status             String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  orderItems         OrderItem[]
  deliveryDetails    DeliveryDetails?
}

model DeliveryDetails {
  id                   String    @id @default(uuid())
  orderId              String    @unique
  recipientName        String?
  recipientPhone       String?
  deliveryAddress      String?
  postalCode           String?
  deliveryInstructions String?
  deliveryStatus       String?
  deliveryDate         DateTime?
  deliveryTime         String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  order                Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model DeliveryFeeConfig {
  id               String               @id @default(uuid())
  basePostalCode   String
  type             String // "distance-based" or "flat"
  distanceFeePerKm Int? // Fee per kilometer, optional
  customRules      CustomDeliveryRule[]
}

model CustomDeliveryRule {
  id                  String            @id @default(uuid())
  postalCodePrefix    String
  feeInCents          Int
  deliveryFeeConfig   DeliveryFeeConfig @relation(fields: [deliveryFeeConfigId], references: [id])
  deliveryFeeConfigId String
}

model OrderItem {
  id              String   @id @default(uuid())
  orderId         String
  productId       String?
  ProductVariantId   String? // New field to link to a specific size
  description     String?
  type            String? // "product" or "custom"
  priceInCents    Int
  quantity        Int
  subtotalInCents Int
  cardMessage     String? // Store personalized card message
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product? @relation(fields: [productId], references: [id], onDelete: Restrict)
  ProductVariant     ProductVariant? @relation(fields: [ProductVariantId], references: [id], onDelete: Restrict) // Relation to ProductVariant
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CarouselImage {
  id        Int      @id @default(autoincrement()) @map("_id")
  imageUrl  String
  usedFor   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement()) @map("_id")
  text      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeSetting {
  id              String   @id @default(uuid())
  backgroundImage String
  overlayText     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
